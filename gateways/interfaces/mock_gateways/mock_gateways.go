// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/int128/amefuriso/gateways/interfaces (interfaces: UserRepository,SubscriptionRepository,PNGRepository,WeatherService,NotificationService)

// Package mock_gateways is a generated GoMock package.
package mock_gateways

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/int128/amefuriso/domain"
	interfaces "github.com/int128/amefuriso/gateways/interfaces"
	reflect "reflect"
	time "time"
)

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockUserRepository) FindAll(arg0 context.Context) ([]domain.User, error) {
	ret := m.ctrl.Call(m, "FindAll", arg0)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockUserRepositoryMockRecorder) FindAll(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockUserRepository)(nil).FindAll), arg0)
}

// FindById mocks base method
func (m *MockUserRepository) FindById(arg0 context.Context, arg1 domain.UserID) (*domain.User, error) {
	ret := m.ctrl.Call(m, "FindById", arg0, arg1)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById
func (mr *MockUserRepositoryMockRecorder) FindById(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserRepository)(nil).FindById), arg0, arg1)
}

// Save mocks base method
func (m *MockUserRepository) Save(arg0 context.Context, arg1 domain.User) error {
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockUserRepositoryMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserRepository)(nil).Save), arg0, arg1)
}

// MockSubscriptionRepository is a mock of SubscriptionRepository interface
type MockSubscriptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionRepositoryMockRecorder
}

// MockSubscriptionRepositoryMockRecorder is the mock recorder for MockSubscriptionRepository
type MockSubscriptionRepositoryMockRecorder struct {
	mock *MockSubscriptionRepository
}

// NewMockSubscriptionRepository creates a new mock instance
func NewMockSubscriptionRepository(ctrl *gomock.Controller) *MockSubscriptionRepository {
	mock := &MockSubscriptionRepository{ctrl: ctrl}
	mock.recorder = &MockSubscriptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSubscriptionRepository) EXPECT() *MockSubscriptionRepositoryMockRecorder {
	return m.recorder
}

// FindBySubscriptionID mocks base method
func (m *MockSubscriptionRepository) FindBySubscriptionID(arg0 context.Context, arg1 domain.UserID, arg2 domain.SubscriptionID) (*domain.Subscription, error) {
	ret := m.ctrl.Call(m, "FindBySubscriptionID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySubscriptionID indicates an expected call of FindBySubscriptionID
func (mr *MockSubscriptionRepositoryMockRecorder) FindBySubscriptionID(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySubscriptionID", reflect.TypeOf((*MockSubscriptionRepository)(nil).FindBySubscriptionID), arg0, arg1, arg2)
}

// FindByUserID mocks base method
func (m *MockSubscriptionRepository) FindByUserID(arg0 context.Context, arg1 domain.UserID) ([]domain.Subscription, error) {
	ret := m.ctrl.Call(m, "FindByUserID", arg0, arg1)
	ret0, _ := ret[0].([]domain.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID
func (mr *MockSubscriptionRepositoryMockRecorder) FindByUserID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockSubscriptionRepository)(nil).FindByUserID), arg0, arg1)
}

// Save mocks base method
func (m *MockSubscriptionRepository) Save(arg0 context.Context, arg1 domain.UserID, arg2 []domain.Subscription) error {
	ret := m.ctrl.Call(m, "Save", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockSubscriptionRepositoryMockRecorder) Save(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSubscriptionRepository)(nil).Save), arg0, arg1, arg2)
}

// MockPNGRepository is a mock of PNGRepository interface
type MockPNGRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPNGRepositoryMockRecorder
}

// MockPNGRepositoryMockRecorder is the mock recorder for MockPNGRepository
type MockPNGRepositoryMockRecorder struct {
	mock *MockPNGRepository
}

// NewMockPNGRepository creates a new mock instance
func NewMockPNGRepository(ctrl *gomock.Controller) *MockPNGRepository {
	mock := &MockPNGRepository{ctrl: ctrl}
	mock.recorder = &MockPNGRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPNGRepository) EXPECT() *MockPNGRepositoryMockRecorder {
	return m.recorder
}

// FindById mocks base method
func (m *MockPNGRepository) FindById(arg0 context.Context, arg1 domain.ImageID) (*domain.Image, error) {
	ret := m.ctrl.Call(m, "FindById", arg0, arg1)
	ret0, _ := ret[0].(*domain.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById
func (mr *MockPNGRepositoryMockRecorder) FindById(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockPNGRepository)(nil).FindById), arg0, arg1)
}

// RemoveOlderThan mocks base method
func (m *MockPNGRepository) RemoveOlderThan(arg0 context.Context, arg1 time.Time) (int, error) {
	ret := m.ctrl.Call(m, "RemoveOlderThan", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveOlderThan indicates an expected call of RemoveOlderThan
func (mr *MockPNGRepositoryMockRecorder) RemoveOlderThan(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOlderThan", reflect.TypeOf((*MockPNGRepository)(nil).RemoveOlderThan), arg0, arg1)
}

// Save mocks base method
func (m *MockPNGRepository) Save(arg0 context.Context, arg1 domain.Image) error {
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockPNGRepositoryMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPNGRepository)(nil).Save), arg0, arg1)
}

// MockWeatherService is a mock of WeatherService interface
type MockWeatherService struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherServiceMockRecorder
}

// MockWeatherServiceMockRecorder is the mock recorder for MockWeatherService
type MockWeatherServiceMockRecorder struct {
	mock *MockWeatherService
}

// NewMockWeatherService creates a new mock instance
func NewMockWeatherService(ctrl *gomock.Controller) *MockWeatherService {
	mock := &MockWeatherService{ctrl: ctrl}
	mock.recorder = &MockWeatherServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWeatherService) EXPECT() *MockWeatherServiceMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockWeatherService) Get(arg0 context.Context, arg1 domain.YahooClientID, arg2 []domain.Location, arg3 interfaces.ObservationOption) ([]domain.Weather, error) {
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]domain.Weather)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockWeatherServiceMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWeatherService)(nil).Get), arg0, arg1, arg2, arg3)
}

// MockNotificationService is a mock of NotificationService interface
type MockNotificationService struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationServiceMockRecorder
}

// MockNotificationServiceMockRecorder is the mock recorder for MockNotificationService
type MockNotificationServiceMockRecorder struct {
	mock *MockNotificationService
}

// NewMockNotificationService creates a new mock instance
func NewMockNotificationService(ctrl *gomock.Controller) *MockNotificationService {
	mock := &MockNotificationService{ctrl: ctrl}
	mock.recorder = &MockNotificationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotificationService) EXPECT() *MockNotificationServiceMockRecorder {
	return m.recorder
}

// SendForecastMessage mocks base method
func (m *MockNotificationService) SendForecastMessage(arg0 context.Context, arg1 domain.Recipient, arg2 interfaces.ForecastMessage) error {
	ret := m.ctrl.Call(m, "SendForecastMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendForecastMessage indicates an expected call of SendForecastMessage
func (mr *MockNotificationServiceMockRecorder) SendForecastMessage(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendForecastMessage", reflect.TypeOf((*MockNotificationService)(nil).SendForecastMessage), arg0, arg1, arg2)
}
