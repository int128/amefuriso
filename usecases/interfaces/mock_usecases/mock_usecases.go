// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/int128/amefuriso/usecases/interfaces (interfaces: GetWeather,GetImage,PollWeathers,CleanupImages,Setup)

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/int128/amefuriso/domain"
	interfaces "github.com/int128/amefuriso/usecases/interfaces"
	reflect "reflect"
)

// MockGetWeather is a mock of GetWeather interface
type MockGetWeather struct {
	ctrl     *gomock.Controller
	recorder *MockGetWeatherMockRecorder
}

// MockGetWeatherMockRecorder is the mock recorder for MockGetWeather
type MockGetWeatherMockRecorder struct {
	mock *MockGetWeather
}

// NewMockGetWeather creates a new mock instance
func NewMockGetWeather(ctrl *gomock.Controller) *MockGetWeather {
	mock := &MockGetWeather{ctrl: ctrl}
	mock.recorder = &MockGetWeatherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGetWeather) EXPECT() *MockGetWeatherMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockGetWeather) Do(arg0 context.Context, arg1 domain.UserID, arg2 domain.SubscriptionID) (*domain.Weather, error) {
	ret := m.ctrl.Call(m, "Do", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Weather)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockGetWeatherMockRecorder) Do(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockGetWeather)(nil).Do), arg0, arg1, arg2)
}

// MockGetImage is a mock of GetImage interface
type MockGetImage struct {
	ctrl     *gomock.Controller
	recorder *MockGetImageMockRecorder
}

// MockGetImageMockRecorder is the mock recorder for MockGetImage
type MockGetImageMockRecorder struct {
	mock *MockGetImage
}

// NewMockGetImage creates a new mock instance
func NewMockGetImage(ctrl *gomock.Controller) *MockGetImage {
	mock := &MockGetImage{ctrl: ctrl}
	mock.recorder = &MockGetImageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGetImage) EXPECT() *MockGetImageMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockGetImage) Do(arg0 context.Context, arg1 domain.ImageID) (*domain.Image, error) {
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(*domain.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockGetImageMockRecorder) Do(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockGetImage)(nil).Do), arg0, arg1)
}

// MockPollWeathers is a mock of PollWeathers interface
type MockPollWeathers struct {
	ctrl     *gomock.Controller
	recorder *MockPollWeathersMockRecorder
}

// MockPollWeathersMockRecorder is the mock recorder for MockPollWeathers
type MockPollWeathersMockRecorder struct {
	mock *MockPollWeathers
}

// NewMockPollWeathers creates a new mock instance
func NewMockPollWeathers(ctrl *gomock.Controller) *MockPollWeathers {
	mock := &MockPollWeathers{ctrl: ctrl}
	mock.recorder = &MockPollWeathersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPollWeathers) EXPECT() *MockPollWeathersMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockPollWeathers) Do(arg0 context.Context, arg1 interfaces.URLProviders) error {
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do
func (mr *MockPollWeathersMockRecorder) Do(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockPollWeathers)(nil).Do), arg0, arg1)
}

// MockCleanupImages is a mock of CleanupImages interface
type MockCleanupImages struct {
	ctrl     *gomock.Controller
	recorder *MockCleanupImagesMockRecorder
}

// MockCleanupImagesMockRecorder is the mock recorder for MockCleanupImages
type MockCleanupImagesMockRecorder struct {
	mock *MockCleanupImages
}

// NewMockCleanupImages creates a new mock instance
func NewMockCleanupImages(ctrl *gomock.Controller) *MockCleanupImages {
	mock := &MockCleanupImages{ctrl: ctrl}
	mock.recorder = &MockCleanupImagesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCleanupImages) EXPECT() *MockCleanupImagesMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockCleanupImages) Do(arg0 context.Context) error {
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do
func (mr *MockCleanupImagesMockRecorder) Do(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockCleanupImages)(nil).Do), arg0)
}

// MockSetup is a mock of Setup interface
type MockSetup struct {
	ctrl     *gomock.Controller
	recorder *MockSetupMockRecorder
}

// MockSetupMockRecorder is the mock recorder for MockSetup
type MockSetupMockRecorder struct {
	mock *MockSetup
}

// NewMockSetup creates a new mock instance
func NewMockSetup(ctrl *gomock.Controller) *MockSetup {
	mock := &MockSetup{ctrl: ctrl}
	mock.recorder = &MockSetupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSetup) EXPECT() *MockSetupMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockSetup) Do(arg0 context.Context) (*domain.User, error) {
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockSetupMockRecorder) Do(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockSetup)(nil).Do), arg0)
}
