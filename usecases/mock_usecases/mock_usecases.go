// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/int128/amefurisobot/usecases (interfaces: IGetWeather,IGetImage,IPollWeathers,ISetup)

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/int128/amefurisobot/domain"
	usecases "github.com/int128/amefurisobot/usecases"
	reflect "reflect"
)

// MockIGetWeather is a mock of IGetWeather interface
type MockIGetWeather struct {
	ctrl     *gomock.Controller
	recorder *MockIGetWeatherMockRecorder
}

// MockIGetWeatherMockRecorder is the mock recorder for MockIGetWeather
type MockIGetWeatherMockRecorder struct {
	mock *MockIGetWeather
}

// NewMockIGetWeather creates a new mock instance
func NewMockIGetWeather(ctrl *gomock.Controller) *MockIGetWeather {
	mock := &MockIGetWeather{ctrl: ctrl}
	mock.recorder = &MockIGetWeatherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIGetWeather) EXPECT() *MockIGetWeatherMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockIGetWeather) Do(arg0 context.Context, arg1 domain.UserID, arg2 domain.SubscriptionID) (*domain.Weather, error) {
	ret := m.ctrl.Call(m, "Do", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Weather)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockIGetWeatherMockRecorder) Do(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockIGetWeather)(nil).Do), arg0, arg1, arg2)
}

// MockIGetImage is a mock of IGetImage interface
type MockIGetImage struct {
	ctrl     *gomock.Controller
	recorder *MockIGetImageMockRecorder
}

// MockIGetImageMockRecorder is the mock recorder for MockIGetImage
type MockIGetImageMockRecorder struct {
	mock *MockIGetImage
}

// NewMockIGetImage creates a new mock instance
func NewMockIGetImage(ctrl *gomock.Controller) *MockIGetImage {
	mock := &MockIGetImage{ctrl: ctrl}
	mock.recorder = &MockIGetImageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIGetImage) EXPECT() *MockIGetImageMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockIGetImage) Do(arg0 context.Context, arg1 domain.ImageID) (*domain.Image, error) {
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(*domain.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockIGetImageMockRecorder) Do(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockIGetImage)(nil).Do), arg0, arg1)
}

// MockIPollWeathers is a mock of IPollWeathers interface
type MockIPollWeathers struct {
	ctrl     *gomock.Controller
	recorder *MockIPollWeathersMockRecorder
}

// MockIPollWeathersMockRecorder is the mock recorder for MockIPollWeathers
type MockIPollWeathersMockRecorder struct {
	mock *MockIPollWeathers
}

// NewMockIPollWeathers creates a new mock instance
func NewMockIPollWeathers(ctrl *gomock.Controller) *MockIPollWeathers {
	mock := &MockIPollWeathers{ctrl: ctrl}
	mock.recorder = &MockIPollWeathersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPollWeathers) EXPECT() *MockIPollWeathersMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockIPollWeathers) Do(arg0 context.Context, arg1 usecases.ImageURLProvider) error {
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do
func (mr *MockIPollWeathersMockRecorder) Do(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockIPollWeathers)(nil).Do), arg0, arg1)
}

// MockISetup is a mock of ISetup interface
type MockISetup struct {
	ctrl     *gomock.Controller
	recorder *MockISetupMockRecorder
}

// MockISetupMockRecorder is the mock recorder for MockISetup
type MockISetupMockRecorder struct {
	mock *MockISetup
}

// NewMockISetup creates a new mock instance
func NewMockISetup(ctrl *gomock.Controller) *MockISetup {
	mock := &MockISetup{ctrl: ctrl}
	mock.recorder = &MockISetupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockISetup) EXPECT() *MockISetupMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockISetup) Do(arg0 context.Context) (*domain.User, error) {
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockISetupMockRecorder) Do(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockISetup)(nil).Do), arg0)
}
